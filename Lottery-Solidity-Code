// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;  //for showing which compiler version

contract lot{
    address public manager;
    address payable[] public participants;

    constructor ()
    {
        manager=msg.sender;  // global val

    }

    receive() external payable // to esnure participants pay with set condition
    {   require(msg.value==1 ether);
        participants.push(payable(msg.sender));
    }

    function getBalance() public view returns(uint)  //only manager can get all balance of lottery
    {   require(msg.sender==manager);
        return address(this).balance;
    }

    function random() public view returns(uint)
    {
     return  uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,participants.length)));
    // this line is just for random numbers and are not likely to be used in real conracts just for example
    }
    function lotwinner() public
    {
        require(msg.sender==manager);
        require(participants.length>=3);
        uint r=random();
        address payable winner;
        uint index = r % participants.length;
        winner=participants[index];
        winner.transfer(getBalance());
        participants=new address payable[](0);
    }
}
